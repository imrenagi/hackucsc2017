#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('BeAnonymous:server');
var http = require('http');
var server = http.createServer(app);
var io = require('socket.io')(server);
var db = require('../services/db');

/**
 * Get port from environment and store in Express.
 */
var port = getPort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Listen on provided port, on all network interfaces, 
 * when database connection is established.
 */
var dbEnvironment = (app.get('env') === 'test' ? db.MODE_TEST : db.MODE_PRODUCTION);
db.connect(dbEnvironment, function(err){
  if (err) {
    console.log('Unable to connect to MySQL')
    process.exit(1)
  } else {
    // io.on('connection', chat.onListening);
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);    
  }
})

function getPort(value) {
  var port = parseInt(value, 10);
  if (isNaN(port)) return val;
  return (port >= 0) ? port : false
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINU1':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}